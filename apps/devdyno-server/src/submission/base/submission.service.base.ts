/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Submission as PrismaSubmission,
  Exercise as PrismaExercise,
  User as PrismaUser,
} from "@prisma/client";

export class SubmissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubmissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.submission.count(args);
  }

  async submissions<T extends Prisma.SubmissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubmissionFindManyArgs>
  ): Promise<PrismaSubmission[]> {
    return this.prisma.submission.findMany<Prisma.SubmissionFindManyArgs>(args);
  }
  async submission<T extends Prisma.SubmissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubmissionFindUniqueArgs>
  ): Promise<PrismaSubmission | null> {
    return this.prisma.submission.findUnique(args);
  }
  async createSubmission<T extends Prisma.SubmissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubmissionCreateArgs>
  ): Promise<PrismaSubmission> {
    return this.prisma.submission.create<T>(args);
  }
  async updateSubmission<T extends Prisma.SubmissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubmissionUpdateArgs>
  ): Promise<PrismaSubmission> {
    return this.prisma.submission.update<T>(args);
  }
  async deleteSubmission<T extends Prisma.SubmissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubmissionDeleteArgs>
  ): Promise<PrismaSubmission> {
    return this.prisma.submission.delete(args);
  }

  async getExercise(parentId: string): Promise<PrismaExercise | null> {
    return this.prisma.submission
      .findUnique({
        where: { id: parentId },
      })
      .exercise();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.submission
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
